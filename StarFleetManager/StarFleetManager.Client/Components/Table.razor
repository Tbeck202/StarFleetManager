@using System.Reflection
@using System.ComponentModel.DataAnnotations

<div class="table-responsive">
    <input id="table-filter" name="table-filter" class="form-control m-1" @bind="_enteredFilter" @oninput="UpdateTableFilter" placeholder="Search your Fleet..." style="width: 20rem;" />
    <div class="form-text" id="basic-addon4">Filters by Name, Model, Manufacturer or class</div>
    <table class="table table-sm">
        <thead>
            <tr>
                <th scope="col">
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#editModal">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-database-add" viewBox="0 0 16 16">
                            <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0" />
                            <path d="M12.096 6.223A5 5 0 0 0 13 5.698V7c0 .289-.213.654-.753 1.007a4.5 4.5 0 0 1 1.753.25V4c0-1.007-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1s-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4v9c0 1.007.875 1.755 1.904 2.223C4.978 15.71 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.5 4.5 0 0 1-.813-.927Q8.378 15 8 15c-1.464 0-2.766-.27-3.682-.687C3.356 13.875 3 13.373 3 13v-1.302c.271.202.58.378.904.525C4.978 12.71 6.427 13 8 13h.027a4.6 4.6 0 0 1 0-1H8c-1.464 0-2.766-.27-3.682-.687C3.356 10.875 3 10.373 3 10V8.698c.271.202.58.378.904.525C4.978 9.71 6.427 10 8 10q.393 0 .774-.024a4.5 4.5 0 0 1 1.102-1.132C9.298 8.944 8.666 9 8 9c-1.464 0-2.766-.27-3.682-.687C3.356 7.875 3 7.373 3 7V5.698c.271.202.58.378.904.525C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777M3 4c0-.374.356-.875 1.318-1.313C5.234 2.271 6.536 2 8 2s2.766.27 3.682.687C12.644 3.125 13 3.627 13 4c0 .374-.356.875-1.318 1.313C10.766 5.729 9.464 6 8 6s-2.766-.27-3.682-.687C3.356 4.875 3 4.373 3 4" />
                        </svg>
                    </button>
                </th>
                @foreach (var prop in typeof(StarShipView)
                                .GetProperties()
                                .OrderBy(prop => prop
                                    .GetCustomAttribute<DisplayAttribute>()?.Order ?? int.MaxValue)
                                    .Where(p => p
                                        .GetCustomAttribute<DisplayAttribute>()?.Order <= 10))
                {
                    var display = prop.GetCustomAttribute<DisplayAttribute>();
                    var columnName = prop.GetCustomAttribute<DisplayAttribute>()?.Name;
                    <th>
                        <div class="col text-center">
                            <p class="m-0">@(display?.Name ?? prop.Name)</p>
                            <button class="btn m-0 p-0" @onclick="() => TableSort(columnName)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-up" viewBox="0 0 16 16">
                                  <path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5m-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5"/>
                                </svg>
                            </button>
                        </div>
                        
                        
                        
                    </th>
                }
            </tr>
            
        </thead>
        <tbody>
            

            @foreach (var ship in _sortedShips.Where(s => string.IsNullOrWhiteSpace(_tableFilter) || s.Name.Contains(_tableFilter, StringComparison.OrdinalIgnoreCase) || s.Model.Contains(_tableFilter, StringComparison.OrdinalIgnoreCase) || s.Manufacturer.Contains(_tableFilter, StringComparison.OrdinalIgnoreCase) || s.StarshipClass.Contains(_tableFilter, StringComparison.OrdinalIgnoreCase)))
            {
                <tr>
                    <td>
                        <button class="btn btn-outline-secondary btn-sm" style="margin: 0 5px 0 0;" @onclick="() => ToggleAdditionalDetails(ship)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-slash-minus" viewBox="0 0 16 16">
                                <path d="m1.854 14.854 13-13a.5.5 0 0 0-.708-.708l-13 13a.5.5 0 0 0 .708.708M4 1a.5.5 0 0 1 .5.5v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0v-2h-2a.5.5 0 0 1 0-1h2v-2A.5.5 0 0 1 4 1m5 11a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5A.5.5 0 0 1 9 12" />
                            </svg>
                        </button>
                    </td>
                    @foreach (var prop in typeof(StarShipView)
                        .GetProperties()
                        .OrderBy(p => p
                            .GetCustomAttribute<DisplayAttribute>()?.Order ?? int.MaxValue)
                            .Where(p => p
                                .GetCustomAttribute<DisplayAttribute>()?.Order <= 10))
                    {
                        var headerName = prop.GetCustomAttribute<DisplayAttribute>().Name;
                        var value = prop.GetValue(ship);
                        string[] numericColumns = new string[]
                        {
                            "Max Atmosphering Speed",
                                "Cost (in Credits)",
                                "Crew",
                                "Passengers",
                                "Cargo Capacity"
                        };

                        <td>
                            <div class="text-center">@value </div>
                        </td>
                       
                        
                    }
                </tr>
                if (ship.DisplayAdditionalDetails)
                {
                    <tr class="table-light" style="display:@(ship.DisplayAdditionalDetails ? "table-row" : "none"); border-bottom: solid 2px black;">
                        <td colspan="10">
                            <table class="table table-sm mb-2" style="border-bottom: none!;">
                                <thead>
                                    <tr>
                                        @foreach (var prop in typeof(StarShipView)
                                                                        .GetProperties()
                                                                        .OrderBy(p => p
                                                                        .GetCustomAttribute<DisplayAttribute>()?.Order ?? int.MaxValue)
                                                                        .Where(p => p
                                                                        .GetCustomAttribute<DisplayAttribute>()?.Order > 10))
                                        {
                                            var display = prop.GetCustomAttribute<DisplayAttribute>();
                                            <th>@(display?.Name ?? prop.Name)</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr style="border-bottom: none!;">
                                        @foreach (var prop in typeof(StarShipView)
                                                                        .GetProperties()
                                                                        .OrderBy(p => p
                                                                        .GetCustomAttribute<DisplayAttribute>()?.Order ?? int.MaxValue)
                                                                        .Where(p => p
                                                                        .GetCustomAttribute<DisplayAttribute>()?.Order > 10))
                                        {
                                            var value = prop.GetValue(ship);
                                            if (value is IList<string> list)
                                            {
                                                if (list.Count == 0)
                                                {
                                                    <td> - </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        <div class="dropdown">
                                                            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                                View
                                                            </button>
                                                            <ul class="dropdown-menu">
                                                                @foreach (var item in list)
                                                                {
                                                                    <li class="p-1">@item</li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    </td>
                                                }
                                            }
                                            else if (value is DateTime dateTime)
                                            {
                                                <td>@dateTime.ToShortDateString()</td>
                                            }
                                            else
                                            {
                                                <td>@value</td>
                                            }
                                        }
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                        <td>
                            <div class="col">
                                <div class="row">
                                    <button class="btn btn-sm btn-warning w-75 m-1" data-bs-toggle="modal" data-bs-target="#editModal" @onclick="() => EditShip(ship)">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                                        </svg>
                                        Edit
                                    </button>
                                </div>
                                <div class="row">
                                    <button class="btn btn-sm btn-danger w-75 m-1" @onclick="() => ToggleDelete(ship)">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                            <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                        </svg>
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </td>
                    </tr>
                    @if (ship.DisplayDeleteButton)
                    {
                        <tr class="table-secondary" style="display:@(ship.DisplayDeleteButton ? "table-row" : "none")">
                            <td colspan="11">
                                <div class="row text-center justify-content-center">
                                    <span class="text-danger">Are you sure you want to delete your @ship.Name?</span>
                                    <button class="btn btn-sm btn-danger w-25 mx-1" @onclick="() => DeleteShip(ship)">Delete</button>
                                    <button class="btn btn-sm btn-info w-25 mx-1" @onclick="() => ToggleDelete(ship)">Cancel</button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                
            }
        </tbody>


    </table>
</div>

@code {
    [Parameter]
    public List<StarShipView> StarShips { get; set; }

    [Parameter]
    public EventCallback<StarShipView> EditShipCallBack { get; set; }

    [Parameter]
    public EventCallback<StarShipView> DeleteShipCallBack { get; set; }

    private List<StarShipView> _sortedShips = new();
    private string _enteredFilter = string.Empty;
    private string _tableFilter = string.Empty;
    private string _sortColumn = nameof(StarShipView.Name);
    private bool _sortDecending = true;

    protected override async Task OnParametersSetAsync()
    {
        if(_sortedShips.Count == 0)
        {
            _sortedShips = StarShips;
            TableSort("Name");
        }
    }

    private void ToggleAdditionalDetails(StarShipView ship)
    {
        ship.DisplayAdditionalDetails = !ship.DisplayAdditionalDetails;
    }

    private void ToggleDelete(StarShipView ship)
    {
        ship.DisplayDeleteButton = !ship.DisplayDeleteButton;
    }

    private void EditShip(StarShipView ship)
    {
        EditShipCallBack.InvokeAsync(ship);
    }

    private void DeleteShip(StarShipView ship)
    {
        DeleteShipCallBack.InvokeAsync(ship);
    }

    private void UpdateTableFilter(ChangeEventArgs eventArgs)
    {
        _tableFilter = eventArgs.Value?.ToString() ?? string.Empty;
        //_tableFilter = _enteredFilter;
    }

    private void TableSort(string columnName)
    {
        try
        {
            if (_sortColumn == columnName)
            {
                _sortDecending = !_sortDecending;
            }
            else
            {
                _sortColumn = columnName;
                _sortDecending = true;
            }

            if (_sortDecending)
            {
                _sortedShips = StarShips.OrderByDescending(s => GetSortValue(s)).ToList();
            }
            else
            {
                _sortedShips = StarShips.OrderBy(s => GetSortValue(s)).ToList();
            }
        }
        catch(Exception ex)
        {
            
        }
        
        StateHasChanged();
    }

    // private int? SetIntDisplay(string columnName, StarShipView ship)
    // {
    //     int? number = -1;
    //     switch (columnName)
    //     {
    //         case "Max Atmosphering Speed":
    //             number = ship.MaxAtmospheringSpeedInt != null ? ship.MaxAtmospheringSpeedInt : -1;
    //             break;
    //         case "Cost (in Credits)":
    //             number = ship.CostInCreditsInt != null ? ship.CostInCreditsInt : -1;
    //             break;
    //         case "Crew":
    //             number = ship.CrewInt != null ? ship.CrewInt : -1;
    //             break;
    //         case "Passengers":
    //             number = ship.PassengersInt != null ? ship.PassengersInt : -1;
    //             break;
    //         case "Cargo Capacity":
    //             number = ship.CargoCapacityInt != null ? ship.CargoCapacityInt : -1;
    //             break;
    //         case "":
    //             number = -1;
    //             break;
    //     }

    //     return number;
    // }

    // private string SetFloatDisplay(float? numFloat, string columnName, StarShipView ship)
    // {
    //     //@SetFloatDisplay((float)value, headerName, ship)
    //     string floatString = "";
    //     if(numFloat is null)
    //     {
    //         switch (columnName)
    //         {
    //             case "Length":
    //                 floatString = StarShips.Where(s => s.Id == ship.Id).First().Length;
    //                 break;
    //             case "":
    //                 floatString = "Parsing Error...";
    //                 break;
    //         }
    //     }
    //     else
    //     {
    //         floatString = numFloat.ToString();
    //     }

    //     return floatString;
    // }

    private object GetSortValue(StarShipView s) =>
        _sortColumn switch
        {
        // nameof(StarShipView.Name) => s.Name,
        //     nameof(StarShipView.Model) => s.Model,
        //     nameof(StarShipView.Manufacturer) => s.Manufacturer,
        //     nameof(StarShipView.StarshipClass) => s.StarshipClass,
        //     nameof(StarShipView.MaxAtmospheringSpeed) => s.MaxAtmospheringSpeedInt != null ? s.MaxAtmospheringSpeedInt : s.MaxAtmospheringSpeed,
        //     nameof(StarShipView.CostInCredits) => s.CostInCreditsInt != null ? s.CostInCreditsInt : s.CostInCredits,
        //     nameof(StarShipView.Crew) => s.CrewInt != null ? s.CrewInt : s.Crew,
        //     nameof(StarShipView.Passengers) => s.PassengersInt != null ? s.PassengersInt : s.Passengers,
        //     nameof(StarShipView.CargoCapacity) => s.CargoCapacityInt != null ? s.CargoCapacityInt : s.CargoCapacity,
        //     nameof(StarShipView.Length) => s.LengthFloat != null ? s.LengthFloat : s.Length,
        //     _ => s.Name

            "Name" => s.Name,
            "Model" => s.Model,
            "Manufacturer" => s.Manufacturer,
            "Class" => s.StarshipClass,
            "Max Atmosphering Speed" => s.MaxAtmospheringSpeedInt != null ? s.MaxAtmospheringSpeedInt : s.MaxAtmospheringSpeed,
            "Cost (in Credits)" => s.CostInCreditsInt != null ? s.CostInCreditsInt : s.CostInCredits,
            "Crew" => s.CrewInt != null ? s.CrewInt : s.Crew,
            "Passengers" => s.PassengersInt != null ? s.PassengersInt : s.Passengers,
            "Cargo Capacity" => s.CargoCapacityInt != null ? s.CargoCapacityInt : s.CargoCapacity,
            "Length" => s.LengthFloat != null ? s.LengthFloat : s.Length,
            _ => s.Name
        };
}
